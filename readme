qsub.py: write commands to submit to cluster
config.properties: include most of the paths of input/output files, parameters to use in the program 
                  (@C: means mentioned parameters can be found in this config file)

##################################
#### alu deletion 
1. build_dist.cpp
   /** create probability density function of insert length for each PN, stratified by reading group
       */
   results written into: (@C)file_dist_prefix 

2. alu_delete.cpp
   /** reads are classified as mid reads (cross alu region, indication of no deletion), clip reads (clip mapped at alu boundary, indication of 
       deletion) and unknown reads (can't know for sure if it is mid or clip read, use insert length instead) .   
       */
   opt = 1: 
       write temporary results: (@C)file_alu_delete0
       generate *log1: high coverage region
       generate *tmp1: counts of 3 types of read, and insert length for unknow reads. 
       generate *tmp2: calculte genotype prob based on *tmp1 files. 
                       header l0, l1, l2: genotype prob based on mid/clip reads
                       header m0, m1, m2: genotype prob based on mid/clip/unknow reads
   opt = 2:
       write final results: (@C)file_alu_delete0
       mutation that is private (only 1 individual has) is ignore. 
       generate *vcf and *pos files: as before, "lr" used mid/clip reads,  "mr" used mid/clip/unknow reads
       filter good quality mutations using *pos file.
       
   opt = 0:
       debug purpose
       
##################################
#### alu insertion
1. alu_insert.cpp 
   /** 
       
       */
   opt = 1: 
       write results: (@C)file_alu_insert0
       for each pn, scan the genome and find potention loci for alu insertion, this generate a lot of temporary files. 
       *tmp1, *tmp2 and *tmp3 files can be ignored after this step
       *tmp4: 

   opt = 2:       
       to be implemented if necessary (to construct consensus inserted sequence )

   opt = 3:
        write results: (@C)file_alu_insert1
        find common insertion positions of multiple individuals
        Note: some PNs with extreme large amount of reads (that might be alu mate). (almost 10 times of other PNs)
              eg: MXQBTEO, HYKJEJS, EIVHBDQ, KSRDJGR
              EITHER:  > 4G memory to fun; OR: ignore them
              I chose to ignore them. For each chromosome, 15% individuals with extremely high potential insert positions are ignored. 
              (search 0.85 in alu_insert.cpp in order to modify this number)
	
2. insert_pos.cpp
   
      
